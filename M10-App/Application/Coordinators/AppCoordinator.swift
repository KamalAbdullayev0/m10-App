//
//  AppCoordinator.swift
//  M10-App
//
//  Created by Kamal Abdullayev on 03.02.25.
//

import UIKit

final class AppCoordinator {
    
    private let window: UIWindow
    private var loginCoordinator: LoginCoordinator?
    private var mainCoordinator: MainCoordinator?
    private var getStartedCoordinator: GetStartedCoordinator?
    private var noInternetCoordinator: NoInternetCoordinator?
    private var lastCoordinator: AnyObject?
    
    init(window: UIWindow) {
        self.window = window
        NotificationCenter.default.addObserver(self, selector: #selector(didDetectNoInternet), name: .noInternetDetected, object: nil)
        print("‚úÖ AppCoordinator –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ NotificationCenter")
    }
    
    deinit {
        NotificationCenter.default.removeObserver(self)
        print("‚ùå AppCoordinator –¥–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    }
    
    func start() {
        print("üîÑ AppCoordinator start()")
//        didDetectNoInternet()
        hasValidToken() ? showMainFlow() : showGetStartedFlow()
    }
    
    private func showGetStartedFlow() {
        print("‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ—Ç–æ–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏/–Ω–∞—á–∞–ª–∞")
        lastCoordinator = getStartedCoordinator
        getStartedCoordinator = GetStartedCoordinator(window: window)
        getStartedCoordinator?.onFinish = { [weak self] in
            self?.showLoginFlow()
        }
        getStartedCoordinator?.start()
    }
    
    private func showLoginFlow() {
        print("‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ—Ç–æ–∫—É –≤—Ö–æ–¥–∞")
        lastCoordinator = loginCoordinator
        loginCoordinator = LoginCoordinator(window: window)
        loginCoordinator?.start()
    }
    
    private func showMainFlow() {
        print("‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≥–ª–∞–≤–Ω–æ–º—É –ø–æ—Ç–æ–∫—É")
        lastCoordinator = mainCoordinator
        mainCoordinator = MainCoordinator(window: window)
        mainCoordinator?.onLogout = { [weak self] in
            self?.logout()
        }
        mainCoordinator?.start()
    }
    
    private func hasValidToken() -> Bool {
        print("üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞")
        let accessToken = UserDefaults.standard.string(forKey: "accessToken")
        let refreshToken = UserDefaults.standard.string(forKey: "refreshToken")
        return accessToken != nil || refreshToken != nil
    }
    
    private func logout() {
        print("üö™ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ —Å–∏—Å—Ç–µ–º—ã...")
        UserDefaults.standard.removeObject(forKey: "accessToken")
        UserDefaults.standard.removeObject(forKey: "refreshToken")
        showGetStartedFlow()
    }
    
    @objc private func didDetectNoInternet() {
        print("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ—Ç–µ—Ä—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞...")
        lastCoordinator = currentCoordinator()
        print("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ç–µ–∫—É—â–∏–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä: \(String(describing: lastCoordinator))")
        
        noInternetCoordinator = NoInternetCoordinator(window: window)
        noInternetCoordinator?.onInternetRestored = { [weak self] in
            self?.didRestoreInternet()
        }
        noInternetCoordinator?.start()
    }
    
    @objc private func didRestoreInternet() {
        print("‚úÖ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞...")
        noInternetCoordinator = nil
        restoreLastFlow()
        lastCoordinator = nil
    }
    
    private func currentCoordinator() -> AnyObject? {
        print("üîÑ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞")
        return getStartedCoordinator ?? loginCoordinator ?? mainCoordinator
    }
    
    private func restoreLastFlow() {
        print("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Ç–æ–∫–∞")
        if let lastCoordinator = lastCoordinator as? LoginCoordinator {
            lastCoordinator.start()
        } else if let lastCoordinator = lastCoordinator as? GetStartedCoordinator {
            lastCoordinator.start()
        } else if let lastCoordinator = lastCoordinator as? MainCoordinator {
            lastCoordinator.start()
        } else {
            print("‚ö†Ô∏è –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω.")
            showMainFlow()
        }
        self.lastCoordinator = nil
    }
}
